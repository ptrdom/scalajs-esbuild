# Prepare package.json for merging

$ copy-file client/esbuild/package.json package.json

# npm

$ delete client/esbuild/package-lock.json
> clean
> set client/scalaJSStage := org.scalajs.sbtplugin.Stage.FastOpt
> server/bgRun
> html 8080
$ exists client/esbuild/package-lock.json
-> exit

$ delete client/esbuild/package-lock.json
> clean
> set client/scalaJSStage := org.scalajs.sbtplugin.Stage.FullOpt
> server/bgRun
> html 8080
$ exists client/esbuild/package-lock.json
-> exit

$ delete client/esbuild/package-lock.json

# pnpm

$ delete client/esbuild/package.json
> setupPackageJson pnpm

$ delete client/esbuild/pnpm-lock.yaml
> set client/esbuildPackageManager := new scalajs.esbuild.PackageManager { override def name = "pnpm"; override def lockFile = "pnpm-lock.yaml"; override def installCommand = "install";  }
> clean
> set client/scalaJSStage := org.scalajs.sbtplugin.Stage.FastOpt
> server/bgRun
> html 8080
$ exists client/esbuild/pnpm-lock.yaml
-> exit

$ delete client/esbuild/pnpm-lock.yaml
> set client/esbuildPackageManager := new scalajs.esbuild.PackageManager { override def name = "pnpm"; override def lockFile = "pnpm-lock.yaml"; override def installCommand = "install";  }
> clean
> set client/scalaJSStage := org.scalajs.sbtplugin.Stage.FullOpt
> server/bgRun
> html 8080
$ exists client/esbuild/pnpm-lock.yaml
-> exit

$ delete client/esbuild/pnpm-lock.yaml

# yarn

$ delete client/esbuild/package.json
> setupPackageJson yarn

$ delete client/esbuild/yarn.lock
> set client/esbuildPackageManager := new scalajs.esbuild.PackageManager { override def name = "yarn"; override def lockFile = "yarn.lock"; override def installCommand = "install";  }
> clean
> set client/scalaJSStage := org.scalajs.sbtplugin.Stage.FastOpt
> server/bgRun
> html 8080
$ exists client/esbuild/yarn.lock
-> exit

$ delete client/esbuild/yarn.lock
> set client/esbuildPackageManager := new scalajs.esbuild.PackageManager { override def name = "yarn"; override def lockFile = "yarn.lock"; override def installCommand = "install";  }
> clean
> set client/scalaJSStage := org.scalajs.sbtplugin.Stage.FullOpt
> server/bgRun
> html 8080
$ exists client/esbuild/yarn.lock
-> exit

# berry

$ delete client/esbuild/package.json
> setupPackageJson berry

$ delete client/esbuild/yarn.lock
$ touch client/esbuild/yarn.lock
> set client/esbuildPackageManager := new scalajs.esbuild.PackageManager { override def name = "yarn"; override def lockFile = "yarn.lock"; override def installCommand = "install";  }
> set client/esbuildRunner := new scalajs.esbuild.EsbuildRunner {override def process(logger: Logger)(scriptFileName: String, directory: File): scala.sys.process.Process = {scala.sys.process.Process(prepareCommand(scriptFileName), directory).run(logger)}; override def run(logger: Logger)(scriptFileName: String, directory: File): Unit = {val fullCommand = prepareCommand(scriptFileName);val exitValue = scala.sys.process.Process(fullCommand, directory).run(logger).exitValue();if (exitValue != 0) {sys.error(s"Nonzero exit value: $exitValue")} else ()};private def prepareCommand(scriptFileName: String) = {"yarn" :: "node" :: scriptFileName :: Nil}}
> clean
> set client/scalaJSStage := org.scalajs.sbtplugin.Stage.FastOpt
> server/bgRun
> html 8080
$ exists client/esbuild/yarn.lock
-> exit

$ delete client/esbuild/yarn.lock
$ touch client/esbuild/yarn.lock
> set client/esbuildPackageManager := new scalajs.esbuild.PackageManager { override def name = "yarn"; override def lockFile = "yarn.lock"; override def installCommand = "install";  }
> set client/esbuildRunner := new scalajs.esbuild.EsbuildRunner {override def process(logger: Logger)(scriptFileName: String, directory: File): scala.sys.process.Process = {scala.sys.process.Process(prepareCommand(scriptFileName), directory).run(logger)}; override def run(logger: Logger)(scriptFileName: String, directory: File): Unit = {val fullCommand = prepareCommand(scriptFileName);val exitValue = scala.sys.process.Process(fullCommand, directory).run(logger).exitValue();if (exitValue != 0) {sys.error(s"Nonzero exit value: $exitValue")} else ()};private def prepareCommand(scriptFileName: String) = {"yarn" :: "node" :: scriptFileName :: Nil}}
> clean
> set client/scalaJSStage := org.scalajs.sbtplugin.Stage.FullOpt
> server/bgRun
> html 8080
$ exists client/esbuild/yarn.lock
-> exit
